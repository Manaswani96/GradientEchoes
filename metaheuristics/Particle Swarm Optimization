import numpy as np

def pso(f, num_particles=30, dim=2, max_iter=100, w=0.5, c1=1.5, c2=1.5, bounds=(-10, 10)):
    # Initialize positions and velocities
    positions = np.random.uniform(bounds[0], bounds[1], (num_particles, dim))
    velocities = np.random.uniform(-1, 1, (num_particles, dim))
    pbest = positions.copy()
    pbest_scores = np.array([f(p) for p in positions])
    gbest_idx = np.argmin(pbest_scores)  # Minimize
    gbest = pbest[gbest_idx].copy()
    
    for _ in range(max_iter):
        for i in range(num_particles):
            r1, r2 = np.random.rand(dim), np.random.rand(dim)
            velocities[i] = w * velocities[i] + c1 * r1 * (pbest[i] - positions[i]) + c2 * r2 * (gbest - positions[i])
            positions[i] += velocities[i]
            # Clamp bounds
            positions[i] = np.clip(positions[i], bounds[0], bounds[1])
            
            score = f(positions[i])
            if score < pbest_scores[i]:
                pbest[i] = positions[i].copy()
                pbest_scores[i] = score
                if score < pbest_scores[gbest_idx]:
                    gbest = positions[i].copy()
                    gbest_idx = i
    
    return gbest, f(gbest)

# Example: Minimize sphere function f(x) = sum(x**2)
def sphere(x):
    return np.sum(x**2)
