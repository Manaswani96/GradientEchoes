import numpy as np
def firefly_algorithm(f, bounds, n_fireflies=30, max_iter=100, beta0=1, gamma=1, alpha=0.2):
    dim = len(bounds)
    fireflies = np.random.uniform([b[0] for b in bounds], [b[1] for b in bounds], (n_fireflies, dim))
    intensities = np.array([f(x) for x in fireflies])  # Minimize
    best_idx = np.argmin(intensities)
    best = fireflies[best_idx].copy()
    for _ in range(max_iter):
        for i in range(n_fireflies):
            for j in range(n_fireflies):
                if intensities[j] < intensities[i]:
                    r = np.linalg.norm(fireflies[i] - fireflies[j])
                    beta = beta0 * np.exp(-gamma * r**2)
                    fireflies[i] += beta * (fireflies[j] - fireflies[i]) + alpha * (np.random.rand(dim) - 0.5)
                    fireflies[i] = np.clip(fireflies[i], [b[0] for b in bounds], [b[1] for b in bounds])
                    intensities[i] = f(fireflies[i])
        best_idx = np.argmin(intensities)
        best = fireflies[best_idx].copy()
    return best, f(best)
