import numpy as np

def aco(dist_matrix, num_ants=20, max_iter=50, alpha=1, beta=2, rho=0.5, Q=1):
    n = dist_matrix.shape[0]
    pheromone = np.ones((n, n)) / n  # Initial
    best_path, best_length = None, float('inf')
    
    for _ in range(max_iter):
        paths = []
        path_lengths = []
        for _ in range(num_ants):
            path = [np.random.randint(n)]  # Start random
            visited = set(path)
            while len(path) < n:
                probs = [(pheromone[path[-1], j]**alpha * (1/dist_matrix[path[-1], j])**beta if j not in visited else 0) for j in range(n)]
                probs = np.array(probs) / sum(probs)
                next_city = np.random.choice(range(n), p=probs)
                path.append(next_city)
                visited.add(next_city)
            path_length = sum(dist_matrix[path[i], path[(i+1)%n]] for i in range(n))
            paths.append(path)
            path_lengths.append(path_length)
            if path_length < best_length:
                best_path, best_length = path, path_length
        
        # Update pheromone
        delta = np.zeros((n, n))
        for k in range(num_ants):
            for i in range(n):
                delta[paths[k][i], paths[k][(i+1)%n]] += Q / path_lengths[k]
        pheromone = (1 - rho) * pheromone + delta
    
    return best_path, best_length

# Example: dist_matrix = np.array([[0,1,2],[1,0,3],[2,3,0]])
