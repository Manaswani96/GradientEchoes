import numpy as np
def grey_wolf_optimizer(f, bounds, n_wolves=30, max_iter=100):
    dim = len(bounds)
    wolves = np.random.uniform([b[0] for b in bounds], [b[1] for b in bounds], (n_wolves, dim))
    fitness = np.array([f(x) for x in wolves])
    alpha_idx = np.argmin(fitness)
    alpha = wolves[alpha_idx].copy()
    for t in range(max_iter):
        a = 2 * (1 - t/max_iter)  # Linearly decrease
        for i in range(n_wolves):
            A = 2 * a * np.random.rand(dim) - a
            C = 2 * np.random.rand(dim)
            D = np.abs(C * alpha - wolves[i])
            wolves[i] = alpha - A * D
            wolves[i] = np.clip(wolves[i], [b[0] for b in bounds], [b[1] for b in bounds])
            fitness[i] = f(wolves[i])
        alpha_idx = np.argmin(fitness)
        alpha = wolves[alpha_idx].copy()
    return alpha, f(alpha)
